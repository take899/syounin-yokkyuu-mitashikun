{"version":3,"sources":["images/profile-icon.png","App.js","reportWebVitals.js","index.js"],"names":["TweetModal","show","setTweetModal","setNotificationList","setTimeoutIdList","CSSTransition","in","timeout","unmountOnExit","classNames","enter","enterActive","enterDone","exit","exitActive","exitDone","className","onClick","onSubmit","e","preventDefault","tweet","target","value","startNotifications","type","name","placeholder","rows","Notifications","notificationList","timeoutIdList","Fragment","length","forEach","clearTimeout","TransitionGroup","map","notification","fill","action","content","id","tweets","names","contents","actions","timeoutIds","delay","i","actionId","Math","floor","random","push","uuid","start","end","timeoutId","window","setTimeout","slice","TimeDisplay","timeData","date","Date","clockStr","getHours","getMinutes","toString","padStart","dateStr","getMonth","getDate","getDay","td","useState","setClockStr","setDateStr","useEffect","setInterval","ProfileImage","src","profileImage","alt","TwitterIcon","viewBox","style","fillRule","clipRule","d","LockIcon","FlashlightIcon","CameraIcon","App","tweetModal","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9b28763.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/profile-icon.8647b9d3.png\";","import React, { useEffect, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport uuid from 'uuid';\nimport profileImage from './images/profile-icon.png';\nimport './App.css';\n\nconst ModalMenu = ({ show, setModalMenu }) => (\n  <CSSTransition\n    in={show}\n    timeout={200}\n    unmountOnExit\n    classNames={{\n      enter: '__modal-menu',\n      enterActive: '__modal-menu __is-active',\n      enterDone: '__modal-menu __is-active',\n      exit: '__modal-menu',\n      exitActive: '__modal-menu',\n      exitDone: '__modal-menu',\n    }}\n  >\n    <div>\n      <div\n        className=\"fixed top-0 bottom-0 left-0 right-0 z-30 w-screen h-screen opacity-0\"\n        onClick={() => setModalMenu(false)}\n      />\n      <div className=\"absolute w-full px-2 top-72\">\n        <div className=\"max-w-screen-sm p-5 m-auto rounded-xl __card\">\n          <div>モーダルを開きました</div>\n          <button onClick={() => setModalMenu(false)}>閉じる</button>\n        </div>\n      </div>\n    </div>\n  </CSSTransition>\n);\n\nconst TweetModal = ({ show, setTweetModal, setNotificationList, setTimeoutIdList }) => {\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let tweet = e.target.tweet.value;\n    if (tweet) {\n      startNotifications({ tweet, setNotificationList, setTimeoutIdList });\n      setTweetModal(false);\n    }\n  };\n  return (\n    <CSSTransition\n      in={show}\n      timeout={200}\n      unmountOnExit\n      classNames={{\n        enter: '__modal-menu',\n        enterActive: '__modal-menu __is-active',\n        enterDone: '__modal-menu __is-active',\n        exit: '__modal-menu',\n        exitActive: '__modal-menu',\n        exitDone: '__modal-menu',\n      }}\n    >\n      <div>\n        <div\n          className=\"fixed top-0 bottom-0 left-0 right-0 w-screen h-screen opacity-0\"\n          onClick={() => setTweetModal(false)}\n        />\n        <div className=\"absolute w-full px-2 top-72\">\n          <div className=\"max-w-screen-sm p-5 m-auto rounded-xl __card\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"flex p-2.5 bg-white rounded-xl\">\n                <ProfileImage />\n                <textarea type=\"text\" name=\"tweet\" placeholder=\"いまどうしてる？\" rows=\"5\" className=\"w-full px-4 py-2 ml-2 bg-white\" />\n              </div>\n              <div className=\"mt-4 text-center\">\n                <input type=\"submit\" value=\"ツイートする(偽)\" className=\"px-6 py-1 font-bold text-white rounded-full __bg-twitter-color\" />\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </CSSTransition>\n  );\n};\n\nconst Notification = ({ show, setNotification, name, content }) => (\n  <CSSTransition\n    in={show}\n    timeout={200}\n    unmountOnExit\n    classNames={{\n      enter: '__notification',\n      enterActive: '__notification __is-active',\n      enterDone: '__notification __is-active',\n      exit: '__notification __is-fadeout',\n      exitActive: '__notification __is-fadeout',\n      exitDone: '__notification __is-fadeout',\n    }}\n  >\n    <div>\n      <div\n        className=\"absolute w-full h-full opacity-0\"\n        onClick={() => setNotification(false)}\n      />\n      <div className=\"absolute w-full px-2 top-64\">\n        <div className=\"max-w-screen-sm p-3 m-auto rounded-xl __card\">\n          <div className=\"flex justify-between\">\n            <div className=\"flex\">\n              <div className=\"w-6 p-1 rounded-md __bg-twitter-color\"><TwitterIcon fill='white'/></div>\n              <div className=\"ml-2 font-normal text-black text-opacity-50\">TWITEER</div>\n            </div>\n            <div className=\"text-black text-opacity-40\">今</div>\n          </div>\n            <div className=\"mt-3 font-extrabold\">{name}さんがいいねしました：</div>\n            <div className=\"font-thin\">{content}</div>\n        </div>\n      </div>\n    </div>\n  </CSSTransition>\n);\n\nconst Notifications = ({ notificationList, setNotificationList, timeoutIdList }) => (\n  <React.Fragment>\n    <CSSTransition\n      in={notificationList.length ? true : false}\n      timeout={0}\n      unmountOnExit\n      classNames={'bg-notification'}\n    >\n      <div\n        className=\"fixed top-0 bottom-0 left-0 right-0 z-30 w-screen h-screen opacity-0\"\n        onClick={() => {\n          timeoutIdList.forEach(clearTimeout);\n          setNotificationList([]);\n        }}\n      />\n    </CSSTransition>\n    <TransitionGroup className=\"fixed left-0 right-0 flex flex-col-reverse top-64\">\n      {notificationList && notificationList.map(notification => (\n        <CSSTransition\n          key={notification.id}\n          timeout={1000}\n          unmountOnExit\n          classNames={{\n            enter: '__notification',\n            enterActive: '__notification __is-active',\n            enterDone: '__notification __is-active',\n            exit: '__notification __is-fadeout',\n            exitActive: '__notification __is-fadeout',\n            exitDone: '__notification __is-fadeout',\n          }}\n        >\n          <div>\n            <div className=\"w-screen px-2 mb-2\">\n              <div className=\"max-w-screen-sm p-3 m-auto rounded-xl __card\">\n                <div className=\"flex justify-between\">\n                  <div className=\"flex\">\n                    <div className=\"w-6 p-1 rounded-md __bg-twitter-color\"><TwitterIcon fill='white'/></div>\n                    <div className=\"ml-2 font-normal text-black text-opacity-50\">TWITEER</div>\n                  </div>\n                  <div className=\"text-black text-opacity-40\">今</div>\n                </div>\n                  <div className=\"mt-3 font-bold\">{notification.name}さん{notification.action}</div>\n                  <div className=\"font-thin\">{notification.content}</div>\n              </div>\n            </div>\n          </div>\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  </React.Fragment>\n);\n\nconst startNotifications = ({ tweet, setNotificationList, setTimeoutIdList }) => {\n  const tweetSize = 1000;\n  const tweets = [];\n  const maxDisplaySize = 5;\n  const names = ['山田', '田中', '井上', '中村', '上田'];\n  const contents = [tweet, tweet, ''];\n  const actions = ['がいいねしました：', 'がリツイートしました：', 'にフォローされました'];\n  const timeoutIds = [];\n  let delay = 3000;\n  // const sigmoid = (x) => {\n  //   return (1.0/(1.0 + Math.exp(-x)));\n  // }\n  setNotificationList([]);\n  for (let i=0; i<tweetSize; i++) {\n    let actionId = Math.floor(3 * Math.random(3));\n    tweets.push({ id: uuid(), name: names[i%names.length], action: actions[actionId], content: contents[actionId] });\n  }\n  for (let i=0; i<tweetSize; i++) {\n    let start = i < maxDisplaySize ? 0 : i + 1 - maxDisplaySize;\n    let end = i + 1;\n    let timeoutId = window.setTimeout(() => {\n      setNotificationList(tweets.slice(start, end));\n    }, delay);\n    timeoutIds.push(timeoutId);\n    if (i<5) {\n      delay += 1500;\n    } else if (i>=5 && i<10) {\n      delay += 1000;\n    } else if (i>=10 && i<30) {\n      delay += 500;\n    } else if (i>=30 && i<500) {\n      delay += 200;\n    } else {\n      delay += 100;\n    }\n    // delay += 1000 - 900*sigmoid(-2 + (10*i)/tweetSize);\n  }\n  setTimeoutIdList(timeoutIds);\n};\n\nconst TimeDisplay = () => {\n  const timeData = () => {\n    const date = new Date();\n    return {\n      clockStr: `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`,\n      dateStr: `${date.getMonth() + 1}月${date.getDate()}日 ${['日','月','火','水','木','金','土'][date.getDay()]}曜日`\n    }\n  }\n  const td = timeData();\n  const [clockStr, setClockStr] = useState(td.clockStr);\n  const [dateStr, setDateStr] = useState(td.dateStr);\n  \n  useEffect(() => {\n    setInterval(() => {\n      const td = timeData();\n      setClockStr(td.clockStr);\n      setDateStr(td.dateStr);\n    }, 1000)\n  }, []);\n  \n  return (\n    <div className=\"fixed left-0 w-full top-28\">\n      <div className=\"text-center text-white\">\n        <div className=\"text-7xl font-extralight\">{clockStr}</div>\n        <div className=\"text-xl font-light leading-10\">{dateStr}</div>\n      </div>\n    </div>\n  )\n};\n\nconst ProfileImage = () => (\n  <img src={profileImage} alt=\"プロフィール画像\" className=\"border-4 border-blue-200 rounded-full w-14 h-14\" />\n);\n\nconst TwitterIcon = ({fill}) => (\n  <svg viewBox=\"0 0 512 512\">\n    <path fill={fill} style={{fillRule: 'evenodd', clipRule: \"evenodd\"}} d='M496 109.5a201.8 201.8 0 01-56.55 15.3 97.51 97.51 0 0043.33-53.6 197.74 197.74 0 01-62.56 23.5A99.14 99.14 0 00348.31 64c-54.42 0-98.46 43.4-98.46 96.9a93.21 93.21 0 002.54 22.1 280.7 280.7 0 01-203-101.3A95.69 95.69 0 0036 130.4c0 33.6 17.53 63.3 44 80.7A97.5 97.5 0 0135.22 199v1.2c0 47 34 86.1 79 95a100.76 100.76 0 01-25.94 3.4 94.38 94.38 0 01-18.51-1.8c12.51 38.5 48.92 66.5 92.05 67.3A199.59 199.59 0 0139.5 405.6a203 203 0 01-23.5-1.4A278.68 278.68 0 00166.74 448c181.36 0 280.44-147.7 280.44-275.8 0-4.2-.11-8.4-.31-12.5A198.48 198.48 0 00496 109.5z'/>\n  </svg>\n);\nconst LockIcon = ({fill}) => (\n  <svg viewBox=\"0 0 46 67\">\n    <path fill={fill} style={{fillRule: 'evenodd', clipRule: \"evenodd\"}} d=\"M34.8,27v-9c0-6.4-5.1-11.5-11.5-11.5h-0.5c-6.4,0-11.5,5.1-11.5,11.5v9H34.8z M41.3,27.1c2.7,0.6,4.7,3,4.7,5.9v27.5c0,3.3-2.7,6-6,6H6c-3.3,0-6-2.7-6-6V33c0-2.9,2-5.3,4.8-5.9V18c0-9.9,8.1-18,18-18h0.5c9.9,0,18,8.1,18,18V27.1z\"/>\n  </svg>\n);\nconst FlashlightIcon = ({fill}) => (\n  <svg viewBox=\"0 0 26 68\">\n    <path fill={fill} style={{fillRule: 'evenodd', clipRule: \"evenodd\"}} d=\"M13,40c-1.7,0-3-1.3-3-3c0-1.7,1.3-3,3-3s3,1.3,3,3C16,38.7,14.7,40,13,40z M13,26.5c-2.5,0-4.5,2-4.5,4.5v6c0,2.5,2,4.5,4.5,4.5s4.5-2,4.5-4.5v-6C17.5,28.5,15.5,26.5,13,26.5z M0,6h26c0,9-6,12-6,18c0,0,0,13.3,0,40c0,2.2-1.8,4-4,4h-6c-2.2,0-4-1.8-4-4V24C6,18,0,15,0,6z M2,0h22c1.1,0,2,0.9,2,2v2H0V2C0,0.9,0.9,0,2,0z\"/>\n  </svg>\n);\nconst CameraIcon = ({fill}) => (\n  <svg viewBox=\"0 0 64 48\">\n    <path fill={fill} style={{fillRule: 'evenodd', clipRule: \"evenodd\"}} d=\"M51,17c-1.1,0-2-0.9-2-2c0-1.1,0.9-2,2-2s2,0.9,2,2C53,16.1,52.1,17,51,17z M7,3.5h4c0.6,0,1,0.4,1,1V6H6V4.5C6,3.9,6.4,3.5,7,3.5z M32,41c-7.7,0-14-6.3-14-14s6.3-14,14-14s14,6.3,14,14S39.7,41,32,41z M32,38.5c6.4,0,11.5-5.1,11.5-11.5S38.4,15.5,32,15.5S20.5,20.6,20.5,27S25.6,38.5,32,38.5z M4,8h10.3c1,0,2-0.5,2.5-1.4l2.4-3.8c1.1-1.8,3-2.8,5.1-2.8h15.3c2.1,0,4,1.1,5.1,2.8l2.4,3.8C47.7,7.5,48.6,8,49.7,8H60c2.2,0,4,1.8,4,4v32c0,2.2-1.8,4-4,4H4c-2.2,0-4-1.8-4-4V12C0,9.8,1.8,8,4,8z\"/>\n  </svg>\n);\n\nconst App = () => {\n  const [tweetModal, setTweetModal] = useState(false);\n  const [notificationList, setNotificationList] = useState([]);\n  const [timeoutIdList, setTimeoutIdList] = useState([]);\n\n  return (\n    <React.Fragment>\n      <div className=\"__bg-image\"></div>\n      <TweetModal show={tweetModal} setTweetModal={setTweetModal} setNotificationList={setNotificationList} setTimeoutIdList={setTimeoutIdList}/>\n      <Notifications\n        notificationList={notificationList}\n        setNotificationList={setNotificationList}\n        timeoutIdList={timeoutIdList}\n      />\n      <div className=\"fixed left-0 w-full top-16\">\n        <div className=\"flex justify-center\">\n          <div style={{ width: '1.4rem' }}>\n            <LockIcon fill=\"#fff\" />\n          </div>\n        </div>\n      </div>\n      <div className=\"fixed left-0 w-full px-12 bottom-10\">\n        <div className=\"flex justify-between max-w-screen-sm m-auto\">\n          <button onClick={() => {\n            // let tweet = window.prompt('ツイートを入力してください');\n            // if (tweet) {\n            //   startNotifications({ tweet, setNotificationList, setTimeoutIdList });\n            // }\n            setTweetModal(true);\n          }}>\n            <div className=\"flex items-center justify-center w-12 h-12 rounded-full __bg-blur\">\n              <div style={{ width: '0.56rem' }}>\n                <FlashlightIcon fill=\"#fff\" />\n              </div>\n            </div>\n          </button>\n          <button onClick={() => {\n            let tweet = '小さい頃、よくツクシ取ってたけどあれって一体何なんだろう';\n            startNotifications({ tweet, setNotificationList, setTimeoutIdList });\n          }}>\n            <div className=\"flex items-center justify-center w-12 h-12 rounded-full __bg-blur\">\n              <div style={{ width: '1.2rem' }}>\n                <CameraIcon fill=\"#fff\" />\n              </div>\n            </div>\n          </button>\n        </div>\n      </div>\n      <div className=\"fixed left-0 w-full top-8\">\n        <div className=\"flex justify-end max-w-screen-sm m-auto\">\n          <div className=\"w-12 mr-6 h-0.5 bg-gray-400 opacity-60 rounded-sm\"></div>\n        </div>\n      </div>\n      <div className=\"fixed left-0 w-full bottom-2\">\n        <div className=\"w-32 h-1 m-auto bg-gray-100 rounded-sm\"></div>\n      </div>\n      <TimeDisplay />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}